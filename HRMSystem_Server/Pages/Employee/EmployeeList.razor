@page "/employee"
@inject IEmployeeRepository _employeeRepository
@inject IJSRuntime _jsRuntime

<_DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<div class="row mt-4">
	<div class="col-6">
		<h4 class="cardcard-title text-primary">Employee List</h4>
	</div>
	<div class="col-2 offset-2">
		<a href="employee/create" class="btn btn-primary form-control">Add New Employee</a>
	</div>
</div>
<div class="col-6">
	@if (Employee.Any())
	{
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>First Name</th>
					<th>Middle Code</th>
					<th>Last Code</th>
					<th>Employee Code</th>
					<th>Address</th>
					<th>City</th>
					<th>State</th>
					<th>Country</th>
					<th>Postal Code</th>
					<th>Phone Number</th>
					<th>Department</th>
					<th>Action</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var catObj in Employee)
				{
					<tr>
						<td>@catObj.FirstName</td>
						<td>@catObj.MiddleName</td>
						<td>@catObj.LastName</td>
						<td>@catObj.Code</td>
						<td>@catObj.Address</td>
						<td>@catObj.City</td>
						<td>@catObj.State</td>
						<td>@catObj.Country</td>
						<td>@catObj.PostalCode</td>
						<td>@catObj.PhoneNo</td>
						<td>@catObj.Department</td>
						<td>
							<NavLink href="@($"Employee/edit/{catObj.Id}")" class="btn btn-primary mx-1">Edit</NavLink>
							<button class="btn btn-danger" @onclick="()=>HandleDelete(catObj.Id)">Delete</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	}
	else
	{
		if (IsLoading)
		{
			<div class="text-center">
				<img src="/images/loader.gif">
			</div>
		}
		else
		{
			<p>No record found</p>
		}
	}
</div>

@code {
	private IEnumerable<EmployeeDto> Employee { get; set; } = new List<EmployeeDto>();
	private bool IsLoading { get; set; } = true;
	private int DeleteEmployeeId { get; set; } = 0;

	protected override async Task OnInitializedAsync()
	{
		await Task.Run(LoadEmployees);
	}
	private void LoadEmployees()
	{	
		// int num = _employeeRepository.
		Employee = _employeeRepository.GetAll();
		IsLoading = false;
	}

	private void HandleDelete(int id)
	{
		DeleteEmployeeId = id;
		_jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
	}
	public async Task ConfirmDelete_Click(bool isConfirmed)
	{
		if (isConfirmed && DeleteEmployeeId != 0)
		{
			//delete
			_employeeRepository.Delete(DeleteEmployeeId);
			LoadEmployees();
			await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
		}
	}
}
